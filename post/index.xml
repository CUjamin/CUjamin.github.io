<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on CUjamin 海浦新生地</title>
    <link>https://cujamin.github.io/post/</link>
    <description>Recent content in Posts on CUjamin 海浦新生地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jul 2019 16:09:53 +0800</lastBuildDate>
    
	<atom:link href="https://cujamin.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>敏捷原则</title>
      <link>https://cujamin.github.io/post/scrum2/</link>
      <pubDate>Mon, 01 Jul 2019 16:09:53 +0800</pubDate>
      
      <guid>https://cujamin.github.io/post/scrum2/</guid>
      <description> 敏捷原则 可变形和不确定性  积极参用有帮助的可变性
 采用迭代和增量开发
 迭代开发：承认我们在把事情做对之前有可能做错，把事情做好之前有可能做坏。本身是一个有计划的修改策略。
 增量开发：先构建部分，再构建整体。
  Scrum 并不是每次做一个阶段的工作，而是每次做一个特性的工作。
 通过检视、调整和透明来利用可变形
Scrum的核心原则是检视、调整和透明性。
   维度 计划驱动 Scrum     过程定义的程度 一套明确定义的顺序 复杂过程无事时先制定的完整规则   产出物的随即程度 产出物可变形很小或者不存在 预计有变化，因为我们不是重复构建相同的东西   利用的反馈的数量 很少、很晚 频繁、尽早         减少各种各样的不确定因素
 结果不确定性（不确定做什么）：围绕最终产品特性的不确定性。
 方法不确定性（不确定怎么做）：围绕产品的开发过程和技术的不确定性。
   预测和适应  不到最后时刻，不轻易做决定
“最后责任时刻”原则（Last Responsible Moment，LRM）：不该单单因为通用过程要求此事作出决定，就做出不成熟的决定。而是“不轻易做决定”。推迟做出承诺，直到最后责任时刻再作出重要的、不可逆转的决定。
大多数人都倾向于等有更多信息之后再做出更明智的决定。
  经验认知 WIP 进度 执行 </description>
    </item>
    
    <item>
      <title>Scrum1 基础概念</title>
      <link>https://cujamin.github.io/post/scrum1/</link>
      <pubDate>Sun, 30 Jun 2019 23:50:50 +0800</pubDate>
      
      <guid>https://cujamin.github.io/post/scrum1/</guid>
      <description>Scrum基本概念 3个角色  产品负责人
敲定要开发什么，以什么顺序开发
 ScrumMaster
在通用的Scrum框架上建立并遵循自己的过程
 开发团队
确定如何交付 产品负责人要求 的 产品，负责产品的*设计*、*构建*、测试
  3个工件  产品列表（pruduct backlog）
产品待办列表，可能包含*新特性*、对*现有特性的变更*、*需要修复的缺陷*及*技术改进点*。按优先级排列的列表。
 冲刺列表（sprint backlog）
将需求完成的特性分解为一组任务，这组任务及相关对PBI（产品列表名目）组成第二个列表，称为“冲刺列表”； Sprint待办列表，指Sprint任务清单。
 潜在的可交付产品增量
  5个事件  Sprint（Sprint本身为一个事件，包含其他4个事件）
工作在不超过一个月的迭代或循环中进行，这个迭代或者循环称为冲刺（Sprint） 。
 冲刺规划、Sprint计划会议（Sprint Planning Meeting）
根据产品列表 制定出 冲刺列表（sprint backlog） 。
 每日会议（Daily Scrum Meeting）
 Sprint 评审 会议（Sprint Review Meeting）
第一个“检视与调整”。
目的是检查和调整正在构建的产品。
重点是将刚刚做完的特性放在整体开发工作的背景下进行讨论。每个参与者都能清楚了解现状，都有机会指导下一步开发工作。以确保产出最合适的解决方案。
是一个预先安排的检查与调整活动。
 Sprint 回顾 会议（Sprint RetroSpective Meeting）
第二个“检视与调整”。
出现在评审会议之后，下一次冲刺规划之前。
目的是确定当前团队必须关注的价值最高的工作 。
关注点是必要的持续过程改进。</description>
    </item>
    
    <item>
      <title>平台系统开发要求</title>
      <link>https://cujamin.github.io/post/development_notes/</link>
      <pubDate>Sun, 30 Jun 2019 19:08:01 +0800</pubDate>
      
      <guid>https://cujamin.github.io/post/development_notes/</guid>
      <description> 系统功能相关 1.平台系统功能封闭
所有直接与外部系统交互的操作，不得在平台系统中出现，均通过接口服务进行交互。并且这平台系统仅允许系统通用功能和性能进行开发升级，不允许出现对定制需求的开发升级。所有定制需求均只能出现在接口服务中实现。  2.暴力搜索禁止
避免暴力搜索操作，在保证数据最终统计结果准确的前提下，允许用实时统计数量的准确性换取性能的提升。  3.“重跑”功能
尽量单独设计重跑流程，避免异常数据在初次使用时异常触发重跑后，在重跑时继续异常。  4.异常流程及失败流程处理
缩小try catch的范围，尽可能方便定位问题。 出现“非正常”（包括判断分支的“非正常”以及抛出的异常）问题时，需要详细打印异常数据信息。  配置文件相关 1.读取配置文件配置项的功能
“选项类”配置需要设计默认配置值，必要时需要在系统启动日志中打印是否使用了系统默认配置值。  代码规范相关 1.自定义常量
代码中所有需要使用常量的地方，均需要设计编写对应的常量类（可以使用接口类），或者枚举类型，不允许直接使用整形或者字符串值。直接使用整形或者字符串值，严重影响代码的可维护性。  2.常量命名
以简介明确为原则，禁止使用flag这类看似为类型名称，但却没有任何实际含义的名词命名。  3.POJO类设计
需要重写toString()方法，避免打印POJO类对象信息时打印出对象内存地址（实际上是该对象内存地址经哈希算法得出的int类型的值在转换成十六进制），造成日志中出现无效信息。  数据库操作相关 缓存数据 1.禁止自定义Redis KEY值
所有Redis操作，key的取值均必须调用设计专用的&amp;quot;KEY管理类&amp;quot;，提供Key的查询方法或常量，不要出现直接在代码中出现直接使用自定义字符串的形式作为key来操作Redis。  2.Redis数据失效处理
如果数据库表数据在Redis中存在相应数据，则需要设计相应的更新生效机制（或者数据失效机制）。在增删（改）接口中设置删除Redis中的对应的数据，或者设置更新标识，避免接口中对Redis进行数据更新。应将“数据自动加载”操作设计在使用该数据的服务中执行，尽量减少服务之间的耦合，降低接口服务的维护难度  持久化数据 1.强制数据库接口操作
所有数据库表设计时，均需要设计完整的增删（改）查接口功能，应避免运维过程中直接修改数据库数据。  2.数据库操作时间记录
对于频繁更新数据的表，字段中必须包含创建时间、更新时间两个字段  </description>
    </item>
    
  </channel>
</rss>